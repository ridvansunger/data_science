#Proje 1
-[22,27,16,2,18,6] -> Insertion Sort

Yukarı verilen dizinin sort türüne göre aşamalarını yazınız.
Big-O gösterimini yazınız.
Time Complexity: Average case: Aradığımız sayının ortada olması,Worst case: Aradığımız sayının sonda olması, Best case: Aradığımız sayının dizinin en başında olması.
Dizi sıralandıktan sonra 18 sayısı hangi case kapsamına girer? Yazınız.


-[7,3,5,8,2,9,4,15,6] dizisinin Insertion Sort'a göre ilk 4 adımını yazınız.

#Çözüm
 Insertion Sort=> her seferinde dizinin üzerinde ileri doğru ilerleyerek, dizinin bir elemanını alıp geriye doğru elemanlar ile bir bir sıralar ve her bir sıralamasında,
 eğer sıraladığı elemandan daha küçükse o elemanla yer değiştirerek bir geriye atar.
 
 [22,27,16,2,18,6] n
 [2^,27,16,22^,18,6] n-1
 [2,6^,16,22,18,27^] n-2
 [2,6,16,18^,22^,27] n-3
 [2,6,16,18,22,27] 1
 
 1 den n kadar olan sayıların toplamı (n*(n+1))/2=(n^2+n)/2 Dominant faktör n^2 olduğundan Big-O notation'ı O(n^2) olur.
 
 Time Complexity:
 Best Case: TAM SIRALI DİZİ,n tane sayinin üzerinden birer defa geçer ve hiç birini geriye doğru ilerletme gereği olmadığı için bu tek geçişle kalır. O(n)
 Worst case: TAM TERS VERİLMİŞ DİZİ, bu durumda dizinin her bir elemanı bir gerisindekinden küçük olacaktır. 
 Dolayısıyla 1inci eleman için iç döngü 0 2 eleman için geriye doğru 1, 3. eleman için iki daha sonra 3 4 5 6… n kadar geriye hareket yapacaktır.
 Yani 0+1+2+3+4…..+n-1 = [n*(n-1)]/2   :  O(n^2)
 Average case: Aradığımız sayının ortada olması Worst case ile best casein ortalamasını aldığımızda  0(n^2) olarak buluruz
 
 18 dizinin ortasında yer alır ve average case olur.
 
 --[7,3,5,8,2,9,4,15,6] 
 [2^,3,5,8,7^,9,4,15,6]
 [2,3,5^,8,7,9,4^,15,6] 
 [2,3,4,8^,7,9,5^,15,6] 
 [2,3,4,5^,7,9,8^,15,6]
 
 
 
 #
  public void insertion_sort(int[] dizi) 
   {
     for(int j = 1; j < dizi.Length; j++)
     {
        int key = dizi[j]; //her dönüşte dizinin kendinden önceki elemanlarla kıyaslanacak elemanını key'de tutar.
        int i = j - 1;  //bu elemanın bir gerisinde yer alan elemanın index'ini de i'de tutar.
        while (i >= 0 && dizi[i] > key) //eğer eleman bir gerisindekinden küçükse while çalışır.
        {
          dizi[i + 1] = dizi[i];  //büyük eleman bir sonraki index'e yani aslinda j'ye itilir.
           i = i - 1;  //bu kontrol her seferinde bir gerisindeki için devam eder bu da i azaltılarak yapılır.
        }
        dizi[i + 1] = key;
      }
    }
     /*Insertion Sort Kullanımı*/
    int[] dizi = { 2,6,16,18,22,27 };
    insertion_sort(dizi);
    
    
